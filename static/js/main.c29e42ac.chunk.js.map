{"version":3,"sources":["components/Business/business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","props","handleClick","bind","lon","this","business","coordinates","longitude","lat","latitude","window","open","className","src","imageSrc","alt","name","onClick","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","ev","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","handleSortByChange","getSortByClass","renderSortByOptions","onChange","placeholder","autoComplete","Yelp","search","fetch","headers","Authorization","then","res","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","Error","catch","error","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c29e42ac.chunk.js","sourcesContent":["import React from 'react';\nimport './business.css';\n\n\nclass Business extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(){\n        const lon = this.props.business.coordinates.longitude;\n        const lat = this.props.business.coordinates.latitude;\n        window.open(`https://www.google.com/maps/place/${lat},${lon}`);\n    }\n    render() {\n        return (\n            <div className=\"Business\">\n            <div className=\"image-container\">\n                <img src={this.props.business.imageSrc} alt=''/>\n            </div>\n            <h2>{this.props.business.name}</h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\" onClick={this.handleClick}>\n                <p >{this.props.business.address}</p>\n                <p>{this.props.business.city}</p>\n                <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                </div>\n                <div className=\"Business-reviews\">\n                <h3>{this.props.business.category}</h3>\n            <h3 className=\"rating\">{this.props.business.rating}</h3>\n                <p>{this.props.business.reviewCount} reviews</p>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/business';\n\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business => <Business business={business} key={business.id}/>)}\n            </div>\n        )\n    }\n}\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        };\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n          };;\n    }\n    handleSortByChange(sortByOption) {\n        this.setState({sortBy: sortByOption});\n    }\n    handleTermChange(ev){\n        this.setState({term: ev.target.value});\n    }\n    handleLocationChange(ev){\n        this.setState({location: ev.target.value});\n    }\n    handleSearch(ev) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        ev.preventDefault();\n    }\n    getSortByClass(sortByOption){\n        if ( this.state.sortBy === sortByOption ) {\n            return 'active';\n        } else {\n            return '';\n        }\n\n    }\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n        let sortByOptionValue = this.sortByOptions[sortByOption];\n        return <li onClick={this.handleSortByChange.bind(this, sortByOptionValue)} className={ this.getSortByClass(sortByOptionValue) } key={sortByOptionValue}>{sortByOption}</li>;\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n            <div className=\"SearchBar-sort-options\">\n                <ul>\n                    {this.renderSortByOptions()}\n                </ul>\n            </div>\n            <form>\n            <div className=\"SearchBar-fields\">\n                <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n                <input onChange={this.handleLocationChange} placeholder=\"Where?\" autoComplete=\"on\"/>\n            </div>\n            <div onClick={this.handleSearch} className=\"SearchBar-submit\">\n                <a>Let's Go</a>\n            </div>\n            </form>\n            </div>\n        )\n    }\n}\nexport default SearchBar;","const apiKey = 'jj3S44xqIDCbszc1QoW-eZ2fFlnwtl2eH6vWTnYWe-vHmxqNjzsJr3_u5F2g2sCF1ST8wKMgJppklcpyAbqdJ7e4AEoTopfr_uw8UJsTztv7g8Oqlx6xNauQQOVtX3Yx';\n\nconst Yelp = {\n\n    search(term, location, sortBy){\n        return fetch(`https://cors-anywhere.herokuapp.com/api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n                    {headers: {\n                        Authorization: 'Bearer' + ' '+ apiKey,\n                    }})\n                    .then(res => res.json())\n                    .then(jsonResponse => {\n                        if(jsonResponse.businesses){\n                            console.log(jsonResponse);\n                            return jsonResponse.businesses.map(business => {\n                                return {\n                                    'id': business.id,\n                                    'imageSrc': business.image_url,\n                                    'name': business.name,\n                                    'address': business.location.address1,\n                                    'city': business.location.city,\n                                    'state': business.location.state,\n                                    'zipCode': business.location.zip_code,\n                                    'category': business.categories.title,\n                                    'rating': business.rating,\n                                    'reviewCount': business.review_count,\n                                    'coordinates': business.coordinates,\n                                }\n                            });\n                        }\n                        throw new Error('Load failed!');\n                    \n                    }).catch(error => console.log(error));\n    }\n\n}\n\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport '../Business/business';\nimport '../BusinessList/BusinessList';\nimport '../SearchBar/SearchBar';\nimport SearchBar from '../SearchBar/SearchBar';\nimport BusinessList from '../BusinessList/BusinessList';\nimport Yelp from '../../util/Yelp'\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {businesses: []};\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy){\n    Yelp.search(term, location, sortBy).then(businesses => this.setState({businesses: businesses}));\n  }\n  render () {\n    return(\n    <div className=\"App\">\n    <h1>ravenous</h1>\n    <SearchBar searchYelp={this.searchYelp}/>\n    <BusinessList businesses={this.state.businesses}/> \n  </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}